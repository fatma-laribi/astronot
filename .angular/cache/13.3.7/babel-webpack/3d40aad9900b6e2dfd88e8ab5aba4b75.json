{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/message.service\";\nexport let BlogService = /*#__PURE__*/(() => {\n  class BlogService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.blogsUrl = 'api/blogs';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getBlogs() {\n      return this.http.get(this.blogsUrl).pipe(tap(_ => this.log('fetched blogs')), catchError(this.handleError('getBlogs', [])));\n    }\n\n    getBlogNo404(id) {\n      const url = `${this.blogsUrl}/?id=${id}`;\n      return this.http.get(url).pipe(map(blogs => blogs[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? 'fetched' : 'did not find';\n        this.log(`${outcome} blog id=${id}`);\n      }), catchError(this.handleError(`getBlog id=${id}`)));\n    }\n\n    getBlog(id) {\n      const url = `${this.blogsUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched blog id=${id}`)), catchError(this.handleError(`getBlog id=${id}`)));\n    }\n\n    searchBlogs(term) {\n      if (!term.trim()) {\n        return of([]);\n      }\n\n      return this.http.get(`${this.blogsUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found blogs matching \"${term}\"`) : this.log(`no blogs matching \"${term}\"`)), catchError(this.handleError('searchBlogs', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        this.log(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n\n    log(message) {\n      this.messageService.add(`BlogService: ${message}`);\n    }\n\n  }\n\n  BlogService.ɵfac = function BlogService_Factory(t) {\n    return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  BlogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlogService,\n    factory: BlogService.ɵfac,\n    providedIn: 'root'\n  });\n  return BlogService;\n})();","map":null,"metadata":{},"sourceType":"module"}