{"ast":null,"code":"import { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { of } from 'rxjs';\nimport { Home } from './home';\nimport { BlogService } from '../services/blog.service';\ndescribe('HomeComponent', () => {\n  let component;\n  let fixture;\n  let blogService;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [Home],\n      imports: [HttpClientTestingModule],\n      providers: [BlogService]\n    }).compileComponents();\n    fixture = TestBed.createComponent(Home);\n    component = fixture.componentInstance;\n    blogService = TestBed.inject(BlogService);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should set blogs property when ngOnInit is called', fakeAsync(() => {\n    const blogs = [{\n      id: 1,\n      name: 'Blog 1',\n      description: 'Description 1',\n      cover: 'Cover 1',\n      content: 'Content 1'\n    }, {\n      id: 2,\n      name: 'Blog 2',\n      description: 'Description 2',\n      cover: 'Cover 2',\n      content: 'Content 2'\n    }, {\n      id: 3,\n      name: 'Blog 3',\n      description: 'Description 3',\n      cover: 'Cover 3',\n      content: 'Content 3'\n    }];\n    spyOn(blogService, 'getBlogs').and.returnValue(of(blogs));\n    component.ngOnInit();\n    tick(); // Simulate the passage of time for async operations\n\n    expect(component.blogs).toEqual(blogs.slice(0, 3));\n  }));\n  it('should handle error when getBlogs fails', fakeAsync(() => {\n    const errorResponse = {\n      status: 404,\n      statusText: 'Not Found'\n    };\n    spyOn(blogService, 'getBlogs').and.returnValue(of({}).pipe(() => {\n      throw errorResponse;\n    }));\n    component.ngOnInit();\n    tick(); // Assuming you have an error handling mechanism in your component\n\n    expect(component.blogs).toEqual([]); // Or any other appropriate error handling in your component\n  }));\n});","map":{"version":3,"sources":["C:/Users/LENOVO/Downloads/astronaut/astronot-angular/src/app/component/home.spec.ts"],"names":["TestBed","fakeAsync","tick","HttpClientTestingModule","of","Home","BlogService","describe","component","fixture","blogService","beforeEach","configureTestingModule","declarations","imports","providers","compileComponents","createComponent","componentInstance","inject","it","expect","toBeTruthy","blogs","id","name","description","cover","content","spyOn","and","returnValue","ngOnInit","toEqual","slice","errorResponse","status","statusText","pipe"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,EAA6BC,IAA7B,QAAyC,uBAAzC;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC5B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,WAAJ;AACAC,EAAAA,UAAU,CAAC,MAAM;AACbX,IAAAA,OAAO,CAACY,sBAAR,CAA+B;AAC3BC,MAAAA,YAAY,EAAE,CAACR,IAAD,CADa;AAE3BS,MAAAA,OAAO,EAAE,CAACX,uBAAD,CAFkB;AAG3BY,MAAAA,SAAS,EAAE,CAACT,WAAD;AAHgB,KAA/B,EAIGU,iBAJH;AAKAP,IAAAA,OAAO,GAAGT,OAAO,CAACiB,eAAR,CAAwBZ,IAAxB,CAAV;AACAG,IAAAA,SAAS,GAAGC,OAAO,CAACS,iBAApB;AACAR,IAAAA,WAAW,GAAGV,OAAO,CAACmB,MAAR,CAAeb,WAAf,CAAd;AACH,GATS,CAAV;AAUAc,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACb,SAAD,CAAN,CAAkBc,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,mDAAD,EAAsDnB,SAAS,CAAC,MAAM;AACpE,UAAMsB,KAAK,GAAG,CACV;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,WAAW,EAAE,eAAtC;AAAuDC,MAAAA,KAAK,EAAE,SAA9D;AAAyEC,MAAAA,OAAO,EAAE;AAAlF,KADU,EAEV;AAAEJ,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,WAAW,EAAE,eAAtC;AAAuDC,MAAAA,KAAK,EAAE,SAA9D;AAAyEC,MAAAA,OAAO,EAAE;AAAlF,KAFU,EAGV;AAAEJ,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,WAAW,EAAE,eAAtC;AAAuDC,MAAAA,KAAK,EAAE,SAA9D;AAAyEC,MAAAA,OAAO,EAAE;AAAlF,KAHU,CAAd;AAKAC,IAAAA,KAAK,CAACnB,WAAD,EAAc,UAAd,CAAL,CAA+BoB,GAA/B,CAAmCC,WAAnC,CAA+C3B,EAAE,CAACmB,KAAD,CAAjD;AACAf,IAAAA,SAAS,CAACwB,QAAV;AACA9B,IAAAA,IAAI,GARgE,CAQ5D;;AACRmB,IAAAA,MAAM,CAACb,SAAS,CAACe,KAAX,CAAN,CAAwBU,OAAxB,CAAgCV,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAhC;AACH,GAVgE,CAA/D,CAAF;AAWAd,EAAAA,EAAE,CAAC,yCAAD,EAA4CnB,SAAS,CAAC,MAAM;AAC1D,UAAMkC,aAAa,GAAG;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,UAAU,EAAE;AAA3B,KAAtB;AACAR,IAAAA,KAAK,CAACnB,WAAD,EAAc,UAAd,CAAL,CAA+BoB,GAA/B,CAAmCC,WAAnC,CAA+C3B,EAAE,CAAC,EAAD,CAAF,CAAOkC,IAAP,CAAY,MAAM;AAAE,YAAMH,aAAN;AAAsB,KAA1C,CAA/C;AACA3B,IAAAA,SAAS,CAACwB,QAAV;AACA9B,IAAAA,IAAI,GAJsD,CAK1D;;AACAmB,IAAAA,MAAM,CAACb,SAAS,CAACe,KAAX,CAAN,CAAwBU,OAAxB,CAAgC,EAAhC,EAN0D,CAMrB;AACxC,GAPsD,CAArD,CAAF;AAQH,CApCO,CAAR","sourcesContent":["import { TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\r\nimport { of } from 'rxjs';\r\nimport { Home } from './home';\r\nimport { BlogService } from '../services/blog.service';\r\ndescribe('HomeComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let blogService;\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            declarations: [Home],\r\n            imports: [HttpClientTestingModule],\r\n            providers: [BlogService],\r\n        }).compileComponents();\r\n        fixture = TestBed.createComponent(Home);\r\n        component = fixture.componentInstance;\r\n        blogService = TestBed.inject(BlogService);\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('should set blogs property when ngOnInit is called', fakeAsync(() => {\r\n        const blogs = [\r\n            { id: 1, name: 'Blog 1', description: 'Description 1', cover: 'Cover 1', content: 'Content 1' },\r\n            { id: 2, name: 'Blog 2', description: 'Description 2', cover: 'Cover 2', content: 'Content 2' },\r\n            { id: 3, name: 'Blog 3', description: 'Description 3', cover: 'Cover 3', content: 'Content 3' },\r\n        ];\r\n        spyOn(blogService, 'getBlogs').and.returnValue(of(blogs));\r\n        component.ngOnInit();\r\n        tick(); // Simulate the passage of time for async operations\r\n        expect(component.blogs).toEqual(blogs.slice(0, 3));\r\n    }));\r\n    it('should handle error when getBlogs fails', fakeAsync(() => {\r\n        const errorResponse = { status: 404, statusText: 'Not Found' };\r\n        spyOn(blogService, 'getBlogs').and.returnValue(of({}).pipe(() => { throw errorResponse; }));\r\n        component.ngOnInit();\r\n        tick();\r\n        // Assuming you have an error handling mechanism in your component\r\n        expect(component.blogs).toEqual([]); // Or any other appropriate error handling in your component\r\n    }));\r\n});\r\n"]},"metadata":{},"sourceType":"module"}